using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Lykke.Bitcoin.Api.Client.AutoGenerated.Models;
using Lykke.Bitcoin.Api.Client.BitcoinApi;

namespace LkeServices.Offchain
{
    /*
    UI для просмотра состояния каналов клиента
    Таб "Offchain channel state"

    - список ассетов с текущими состояниями каналов (Client balance, Hub balance, Setup tx hash)

    проваливаемся в ассет, получаем историю каналов

    - список каналов по ассету (DateTime, Client balance, Hub balance, Setup tx hash)

    проваливаемся в канал, получаем историю изменения состояний канала

    - список состояний (DateTime, Client balance, Hub balance, Client Commitment, Hub Commitment)

    Client Commitment, Hub Commitment - это ссылки, вытягиваются по клику.
    В истории сортировка по времени.
    */
    #region Models
    public class AssetOffchainChannelContainer
    {
        public IEnumerable<AssetOffchainChannel> AssetOffchainChannels { get; set; }
    }

    public class AssetOffchainChannel
    {
        public string AssetName { get; set; }
        public decimal? ClientAmount { get; set; }
        public decimal? HubAmount { get; set; }
        public string TransactionHash { get; set; }
        public bool Actual { get; set; }
    }

    public class OffchainChannelInfoModelContainer
    {
        public IEnumerable<OffchainChannelInfoModel> OffchainChannelInfos { get; set; }
    }

    public class OffchainChannelInfoModel
    {
        public System.Guid? ChannelId { get; set; }
        public System.DateTime? Date { get; set; }
        public decimal? ClientAmount { get; set; }
        public decimal? HubAmount { get; set; }
        public string TransactionHash { get; set; }
    }

    public class OffchainCommitmentInfoModelContainer
    {
        public IEnumerable<OffchainCommitmentInfoModel> OffchainChannelCommitments { get; set; }
    }

    public class OffchainCommitmentInfoModel
    {
        public System.DateTime? Date { get; set; }

        public decimal? ClientAmount { get; set; }

        public decimal? HubAmount { get; set; }

        public System.Guid? ClientCommitment { get; set; }

        public System.Guid? HubCommitment { get; set; }
    }

    public class CommitmentHex
    {
        public string TransactionHex { get; set; }
    }

    #endregion

    public class ClientOffchainExplorer
    {
        private readonly IBitcoinApiClient _bitcoinApiClient;

        public ClientOffchainExplorer(IBitcoinApiClient bitcoinApiClient)
        {
            _bitcoinApiClient = bitcoinApiClient;
        }

        public async Task<AssetOffchainChannelContainer> GetClientAssetChannelsByMultisig(string multisig)
        {
            var response = await _bitcoinApiClient.Balances(multisig);

            if (response.HasError)
                throw new Exception(response.Error.Message);

            var assetChannels = new List<AssetOffchainChannel>();

            foreach (var channel in response.Balances)
            {
                assetChannels.Add(new AssetOffchainChannel()
                {
                    AssetName = channel.Key,
                    ClientAmount = channel.Value.ClientAmount,
                    HubAmount = channel.Value.HubAmount,
                    TransactionHash = channel.Value.Hash,
                    Actual = channel.Value.Actual
                });
            }

            return new AssetOffchainChannelContainer()
            {
                AssetOffchainChannels = assetChannels,
            };
        }

        public async Task<OffchainChannelInfoModelContainer> GetChannelsByMultisigAndAsset(string multisig, string assetName)
        {
            var response = await _bitcoinApiClient.GetChannels(multisig, assetName);

            if (response.HasError)
                throw new Exception(response.Error.Message);

            List<OffchainChannelInfoModel> channelInfos = new List<OffchainChannelInfoModel>();

            foreach (var channel in response.Channels)
            {
                channelInfos.Add(new OffchainChannelInfoModel()
                {
                    ChannelId = channel.ChannelId,
                    Date = channel.Date,
                    ClientAmount = channel.ClientAmount,
                    HubAmount = channel.HubAmount,
                    TransactionHash = channel.Hash
                });
            }

            return new OffchainChannelInfoModelContainer()
            {
                OffchainChannelInfos = channelInfos,
            };
        }

        public async Task<OffchainCommitmentInfoModelContainer> GetChannelCommitments(Guid channelId)
        {
            var response = await _bitcoinApiClient.GetCommitments(channelId);

            if (response.HasError)
                throw new Exception(response.Error.Message);

            List<OffchainCommitmentInfoModel> commitmentsInfos = new List<OffchainCommitmentInfoModel>();

            foreach (var commitment in response.Commitments)
            {
                commitmentsInfos.Add(new OffchainCommitmentInfoModel()
                {
                    ClientCommitment = commitment.ClientCommitment,
                    HubCommitment = commitment.HubCommitment,
                    Date = commitment.Date,
                    ClientAmount = commitment.ClientAmount,
                    HubAmount = commitment.HubAmount,
                });
            }

            return new OffchainCommitmentInfoModelContainer()
            {
                OffchainChannelCommitments = commitmentsInfos,
            };
        }

        public async Task<CommitmentHex> GetCommitment(Guid commitmentId)
        {
            var response = await _bitcoinApiClient.GetCommitment(commitmentId);

            if (response.HasError)
                throw new Exception(response.Error.Message);

            return new CommitmentHex()
            {
                TransactionHex = response.Hex,
            };
        }
    }
}
